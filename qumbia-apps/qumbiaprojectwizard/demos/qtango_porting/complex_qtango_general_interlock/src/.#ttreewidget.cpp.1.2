#include <QtDebug>

#include <QMenu>
#include <QContextMenuEvent>
#include <QDateTime>
#include "ttreewidget.h"

TTreeWidget::TTreeWidget(QWidget *p) : QTreeWidget(p), QTangoComProxyReader(this), QTangoWidgetCommon(this), _dataSize(0)
{
	QStringList headers;
	headers << "TimeStamp" << "Alarm" << "Description";
	setHeaderLabels(headers);
	setAutoConfiguration(true);
	setDesiredAttributePropertyList(QStringList() << "labels");
	connect(qtangoComHandle(), SIGNAL(newData(const TVariant&)), this, SLOT(refresh(const TVariant&)),
	  Qt::DirectConnection);
	connect(qtangoComHandle(), SIGNAL(attributeAutoConfigured(const TangoConfigurationParameters *)), this, SLOT(configure(const 		TangoConfigurationParameters *)));  
}

void TTreeWidget::configure(const TangoConfigurationParameters *cp)
{
  if(cp->hasValues())
	_labels = cp->values();
}

void TTreeWidget::refresh(const TVariant& v)
{
//	setToolTip(getMessage());
	if (v.quality() == ATTR_INVALID)
	{
		setDisabled(true);
	}
/*	else if (canConvertToBoolVector())
	{
		setDisabled(false);
		clear();
		vector<bool>	data = getDataAsBoolVector();
		QList<QTreeWidgetItem *> items;
		for (unsigned int i = 0; i < data.size(); i++)
		{
			QTreeWidgetItem *item = new QTreeWidgetItem((QTreeWidget*) 0, QStringList(_labels.value(i)));
     			items.append(item);
		}
		insertTopLevelItems(0, items);
	}*/
	else if (v.canConvertToDoubleVector())
	{
		setDisabled(false);
		QVector<double>	data = v.toDoubleVector();
		if (data == oldData)
			return;
		oldData = data;
		clear();
		_dataSize = data.size();
		QList<QTreeWidgetItem *> items;
		for (unsigned int i = 0; i < data.size(); i++)
		{
			if (data[i])
			{
				QStringList cells;
				QDateTime date;
            			date.setTime_t((int) data[i]);
				date = date.addMSecs((int)(1000 *(data[i] - (int) data[i])));
				cells << date.toString("d MMM yyyy hh:mm:ss.zzz") << _labels.value(i) << _descriptions.value(i) << QString().setNum(i);
				QTreeWidgetItem *item = new QTreeWidgetItem((QTreeWidget*) 0, cells);
	     			items.append(item);
			}
		}
		insertTopLevelItems(0, items);
		resizeColumnToContents(0);
		resizeColumnToContents(1);
	}
}

void TTreeWidget::ackSelected()
{
	emit acknowledgeSelected();
}

void TTreeWidget::ackAll()
{
	emit acknowledgeAll();
}

void TTreeWidget::contextMenuEvent(QContextMenuEvent *event)
{
        QMenu *menu = new QMenu(this);
        menu->addAction("Acknowledge Selected", this, SLOT(ackSelected()));
        menu->addAction("Acknowledge All", this, SLOT(ackAll()));
        menu->exec(event->globalPos());
}
