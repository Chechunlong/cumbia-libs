/*----- PROTECTED REGION ID(CumbiaAbstractDevice.cpp) ENABLED START -----*/
static const char *RcsId = "$Id: CumbiaAbstractDevice.cpp,v 1.2 2017-06-01 16:38:07 giacomo Exp $";
//=============================================================================
//
// file :        CumbiaAbstractDevice.cpp
//
// description : C++ source for the CumbiaAbstractDevice class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               CumbiaAbstractDevice are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author: giacomo $
//
// $Revision: 1.2 $
// $Date: 2017-06-01 16:38:07 $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <CumbiaAbstractDevice.h>
#include <CumbiaAbstractDeviceClass.h>
#include <cumbia.h>
#include <cumacros.h>
#include <cuactivity.h>
#include "cutthreadseventbridge.h"
#include <cuthreadfactoryimpl.h>
#include <cutangothreadlistener.h>
#include <cueventloop.h>
#include <cuserviceprovider.h>

/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice.cpp

/**
 *  CumbiaAbstractDevice class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace CumbiaAbstractDevice_ns
{
/*----- PROTECTED REGION ID(CumbiaAbstractDevice::namespace_starting) ENABLED START -----*/

class CumbiaAbstractDevicePrivate
{
public:
    std::map<CuActivity *, CuTangoThreadListener* > activityMap;

    Cumbia *cumbia;
};

//	static initializations

/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : CumbiaAbstractDevice::CumbiaAbstractDevice()
 *	Description : Constructors for a Tango device
 *                implementing the classCumbiaAbstractDevice
 */
//--------------------------------------------------------
CumbiaAbstractDevice::CumbiaAbstractDevice(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::constructor_1
}
//--------------------------------------------------------
CumbiaAbstractDevice::CumbiaAbstractDevice(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::constructor_2
}
//--------------------------------------------------------
CumbiaAbstractDevice::CumbiaAbstractDevice(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : CumbiaAbstractDevice::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void CumbiaAbstractDevice::delete_device()
{
	DEBUG_STREAM << "CumbiaAbstractDevice::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
    printf("\e[1;31mCumbiaAbstractDevice::delete_device entering....\e[0m\n");
    CuEventLoopService *event_loop = static_cast<CuEventLoopService*>( d->cumbia->getServiceProvider()->get(CuServices::EventLoop));
    d->cumbia->getServiceProvider()->unregisterService(CuServices::EventLoop);
    event_loop->exit();
    event_loop->wait();
    delete event_loop;
    delete d->cumbia;
	
	/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : CumbiaAbstractDevice::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void CumbiaAbstractDevice::init_device()
{
	DEBUG_STREAM << "CumbiaAbstractDevice::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::init_device_before
	
	//	No device property to be read from database
	
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::init_device) ENABLED START -----*/
	
	//	Initialize device
    d = new CumbiaAbstractDevicePrivate;
    d->cumbia = new Cumbia();
    d->cumbia->getServiceProvider()->registerService(CuServices::EventLoop, new CuEventLoopService());
    /* start the event loop in a separate thread, where data from activities will be posted */
    static_cast<CuEventLoopService*>( d->cumbia->getServiceProvider()->get(CuServices::EventLoop))->exec(true);
	
	/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::init_device
}


//--------------------------------------------------------
/**
 *	Method      : CumbiaAbstractDevice::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void CumbiaAbstractDevice::always_executed_hook()
{
	DEBUG_STREAM << "CumbiaAbstractDevice::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : CumbiaAbstractDevice::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void CumbiaAbstractDevice::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "CumbiaAbstractDevice::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : CumbiaAbstractDevice::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void CumbiaAbstractDevice::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
    /*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : CumbiaAbstractDevice::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void CumbiaAbstractDevice::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(CumbiaAbstractDevice::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
    /*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::add_dynamic_commands
}

/*----- PROTECTED REGION ID(CumbiaAbstractDevice::namespace_ending) ENABLED START -----*/

//	Additional Methods

void CumbiaAbstractDevice::onProgress(int step, int total, const CuData& data)
{

}

void CumbiaAbstractDevice::onResult(const CuData& data)
{

}

CuData CumbiaAbstractDevice::getToken() const
{

}

void CumbiaAbstractDevice::registerActivity(CuActivity *a, CuTangoThreadListener *l)
{
    d->cumbia->registerActivity(a, l, a->getToken(), CuThreadFactoryImpl(), CuTThreadsEventBridgeFactory()) ;
}

Cumbia *CumbiaAbstractDevice::getCumbia() const
{
    return d->cumbia;
}

/*----- PROTECTED REGION END -----*/	//	CumbiaAbstractDevice::namespace_ending
} //	namespace
